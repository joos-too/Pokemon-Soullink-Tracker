#!/usr/bin/env node
import { Pokedex } from 'pokeapi-js-wrapper';
import { writeFile } from 'node:fs/promises';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const outNamesPath = path.resolve(__dirname, '../src/data/pokemon-de.ts');
const outMapPath = path.resolve(__dirname, '../src/data/pokemon-de-map.ts');

async function main() {
  // Disable wrapper caching in Node (localforage has no backend here)
  const P = new Pokedex({ timeout: 15000, cache: false });
  console.log('Fetching species listâ€¦');
  const list = await P.getPokemonSpeciesList({ limit: 20000, offset: 0 });
  const items = list.results || [];

  const ids = items
    .map((it) => {
      const m = it.url.match(/\/pokemon-species\/(\d+)\/?$/);
      return m ? Number(m[1]) : null;
    })
    .filter((x) => !!x);

  const results = [];
  const deToId = new Map(); // lower-case German name -> species id
  const CHUNK = 60;
  for (let i = 0; i < ids.length; i += CHUNK) {
    const slice = ids.slice(i, i + CHUNK);
    process.stdout.write(`Fetching ${i + 1}-${Math.min(i + CHUNK, ids.length)} of ${ids.length}\r`);
    const speciesArr = await Promise.all(
      slice.map((id) => P.getPokemonSpeciesByName(id).catch(() => null))
    );
    for (const sp of speciesArr) {
      if (!sp) continue;
      const namesField = sp.names || [];
      const de = namesField.find((n) => n.language?.name === 'de');
      const en = namesField.find((n) => n.language?.name === 'en');
      const nm = (de?.name || en?.name || sp.name || '').trim();
      if (nm) results.push(nm);
      if (de?.name) {
        deToId.set(String(de.name).toLowerCase(), sp.id);
      } else if (sp.name) {
        // fallback: map english to id if no de
        deToId.set(String(sp.name).toLowerCase(), sp.id);
      }
    }
  }

  const unique = Array.from(new Set(results)).sort((a, b) => a.localeCompare(b, 'de'));
  const namesFile = `// Generated by scripts/generate-pokemon-de.mjs\nexport const GERMAN_POKEMON_NAMES: string[] = ${JSON.stringify(unique, null, 2)};\n`;
  await writeFile(outNamesPath, namesFile, 'utf8');
  const obj = Object.fromEntries([...deToId.entries()].sort(([a],[b]) => a.localeCompare(b, 'de')));
  const mapFile = `// Generated by scripts/generate-pokemon-de.mjs\nexport const GERMAN_TO_ID: Record<string, number> = ${JSON.stringify(obj, null, 2)};\n`;
  await writeFile(outMapPath, mapFile, 'utf8');
  console.log(`\nWrote ${unique.length} names to ${outNamesPath}`);
  console.log(`Wrote ${Object.keys(obj).length} mappings to ${outMapPath}`);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
